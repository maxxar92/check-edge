#!/bin/bash

# CHECK-EDGE - Performs 'edge-cli check' and reports changes to Telegram Bot Server
# Settings defined in ./check-edge.cfg
# Github Repository: https://github.com/befranz/check-edge

CEVERSION="0.58"

# Send Telegram message via Serer Bot
function sendmessage {
  OK="$(echo -e '\u2713')"
  NOK="$(echo -e '\u2717')"
  if [ "$SENDUUID" = "Y" ]; then
    UUID=$($EDGECLI info|cut -d' ' -f3)
    UUID="$UUID"$'\n'
  else
    UUID=""
  fi
  TEXT="*${HOSTNAME^^}: ${1}*"$'\n'"${UUID}${2}"
  TEXT="${TEXT//$'\n'/\\n}"
  TEXT="${TEXT//passed/${OK} }"
  TEXT="${TEXT//failed/${NOK} }"
  CURLRC=$(curl -w "%{http_code}" -s -o /dev/null -d '{"update_message":"'"$TEXT"'"}' -H "Content-Type: application/json" -X POST "$URL")
  if [ "$CURLRC" = "200" ]; then
    echo
    echo "Message to Telegram Bot successfully sent."
    echo
    return 0
  else
    echo
    echo "Message not sent! Return code: $CURLRC"
    echo 'Make sure you did /register' $DEVICEID
    echo
    return 1
  fi
}

# Read Individual Settings for Telegram
USRCFG="$0.cfg"
if [ -f "$USRCFG" ]; then
   source "$USRCFG"
else
   # Create Device-ID
   PREID="$(echo $((0x$(cat /etc/machine-id|cut -c1-10)))|cut -c-9)"
   DEVID="${PREID}$(echo $((${PREID} % 9)))"
   # Create Config File
   EDGECLI="$(command -v edge-cli)"
   echo '# URL to the server which runs the Telegram bot' >"$USRCFG"
   echo 'SERVERURL="http://edge-analytics.org/api/update/"' >>"$USRCFG"
   echo '# If you want to get the UUID of the node in the Telegram message' >>"$USRCFG"
   echo '# change the value to Y' >>"$USRCFG"
   echo 'SENDUUID="N"' >>"$USRCFG"
   echo '# Your Device-ID, DO NOT change it, use it to register it on the Telegram Bot' >>"$USRCFG"
   echo "# by entering this text: /register $DEVID" >>"$USRCFG"
   echo "DEVICEID=$DEVID" >>"$USRCFG"
   echo "EDGECLI=\"$EDGECLI\"" >>"$USRCFG"
   echo '# Standard is to only send edge-check report if device is shown as offline in the explorer' >>"$USRCFG"
   echo '# change value to N to notify of edge-cli check failures, regardless of node status.' >>"$USRCFG"
   echo 'REQUIREOFFLINE="Y"' >>"$USRCFG"
   echo '# URL to the host status update endpoint' >"$USRCFG"
   echo 'STATUSURL="http://edge-analytics.org/api/host/"' >>"$USRCFG"
   echo 'Minimum time in minutes a node must be offline before notifying the user'
   echo 'OFFLINEMINTIME=45' >>"$USRCFG"
   echo
   echo "URL to the Edge Community Bot is set."
   echo "To change this URL: nano $USRCFG"
   echo
   echo "Register your Device-ID on the Telegram Bot by: /register $DEVID"
   echo
   exit 1
fi

URL="${SERVERURL}${DEVICEID}"

# Running via Cron?
if [ -t 1 ] ; then
    VIACRON="0"
else
    VIACRON="1"
    # Add random delay max. 60 sec.
    sleep $(( (RANDOM % 60) + 1 ))s
fi

# Compare local version of check-edge with version on Github
GITVER=$(curl -s 'https://raw.githubusercontent.com/befranz/check-edge/master/check-edge'|grep "^CEVERSION="|cut -d'"' -f2)
if [ "$GITVER" != "" ] && [ "$CEVERSION" != "$GITVER" ]; then
  echo
  echo "You're running version $CEVERSION, there is version $GITVER on Github. Run: $(basename $0) update"
  echo
fi

# Check if edge-cli is installed
if [ "$EDGECLI" = "" ]; then
    echo
    echo "Program edge-cli not found."
    echo
    exit 1
fi

# Check 1st parameter
case "${1,,}" in

  # Update/download version from Github?
  "update")
    curl -s 'https://raw.githubusercontent.com/befranz/check-edge/master/check-edge' -o ~/scripts/check-edge
    echo
    echo "check-edge v.$GITVER was downloaded from Github."
    echo
    exit 0
    ;;

  # Post the output of the check to Telegram, even if nothing has changed
  "post")
    POST=1
    ;;

  # Create Crontab entry for scheduled execution (default every 10 min.)
  "setcron")
    JOB="*/30 * * * * ${0} >/dev/null 2>&1"
    TMPC="/tmp/check-edge-cron"
    grep "${0}" -q <(crontab -l) || (crontab -l>"$TMPC"; echo "$JOB">>"$TMPC"; crontab "$TMPC")
    echo
    echo 'Crontab Entry is created. Please check it via "crontab -l" or change it via "crontab -e"'
    echo
    exit 0
    ;;

  # Show Config File
  "config")
    echo
    cat $USRCFG
    echo
    exit 0
    ;;

  # Help
  "help")
    echo
    echo "check-edge: Runs 'edge-cli check' and posts changes to Telegram Bot."
    echo
    echo "Usage:"
    echo "  check-edge [command]"
    echo
    echo "Available Commands:"
    echo "  config     Show config file $USRCFG"
    echo "  post       Post status to Telegram Bot, even if nothing has changed"
    echo "  setcron    Create a Crontab entry for scheduled execution (default every 30 min.)"
    echo "             Use crontab -e to change this setting"
    echo "  update     Download the latest version from https://github.com/befranz/check-edge"
    echo "  version    Show version of the script"
    echo "  help       This output"
    echo
    exit 0
    ;;

  # Show Version
  "version")
    echo
    echo "check-edge v.${CEVERSION}"
    echo
    exit 0
    ;;

esac

# Check if archive.edge.network is reachable
RC=$(curl -sL -w "%{http_code}\n" "https://archive.edge.network/" -o /dev/null)
if [ "$RC" -ne "200" ]; then
    echo
    echo "Edge Repo server archive.edge.network not reachable."
    echo
fi

# get status of host
if [ "$REQUIREOFFLINE" = "Y" ]; then
  UUID=$($EDGECLI info|cut -d' ' -f3)
  RC=$(curl -sL -w "%{http_code}\n" "${STATUSURL}${UUID}" -o /dev/null)
  REPORTSTATUS=1
  if [ "$RC" -ne "200" ]; then
      echo
      echo "Host status endpoint returning code $RC"
      echo
      REPORTSTATUS=0
  else
    HOSTSTATUS=$(curl -s "${STATUSURL}${UUID}")
    if [ $HOSTSTATUS == "offline" ]; then
      REPORTSTATUS=1
    elif [ $HOSTSTATUS == "online" ]; then
      REPORTSTATUS=0
    else
      OFFLINETIME=${HOSTSTATUS#"minutes_offline="}
      if [ $OFFLINETIME -gt $OFFLINEMINTIME ]; then
        REPORTSTATUS=1
      else
        REPORTSTATUS=0
      fi
    fi
  fi
fi


# Perform the check
RESULT="$($EDGECLI check)"
echo "$RESULT" > "${0}.log"
ERROR="failed"
LASTRESULTFAILED="/tmp/check-edge.failed"

if [ "$POST" = "1" ]; then
  sendmessage "" "$RESULT"
  RC=$?
else  
  if [[ "$REQUIREOFFLINE" == "Y" ]]; then
    if [[ "$REPORTSTATUS" == 1 && ! -f $LASTRESULTFAILED ]]; then
        RESULT="Node *offline* since ${OFFLINEMINTIME} minutes. Edge-cli check is:\n${RESULT}"
        sendmessage "$NOK" "$RESULT"
        RC=$?
        echo -n > $LASTRESULTFAILED
    elif [[ "$REPORTSTATUS" == 0 && -f $LASTRESULTFAILED ]]; then
        RESULT="Node is back *online*. Edge-cli check is:\n${RESULT}"
        sendmessage "$OK" "$RESULT"
        RC=$?
        rm -f $LASTRESULTFAILED
    fi
  else
    if [[ "$RESULT" == *"$ERROR"* ]]; then
      if [[ ! -f $LASTRESULTFAILED ]]; then
        sendmessage "$NOK" "$RESULT"
        RC=$?
        echo -n > $LASTRESULTFAILED
      fi
    else
      if [[ -f $LASTRESULTFAILED ]]; then
        sendmessage "$OK" "$RESULT"
        RC=$?
        rm -f $LASTRESULTFAILED
      fi
    fi
  fi
fi
exit $RC
